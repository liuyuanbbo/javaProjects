buildscript {
    apply from: 'dependencies.gradle'
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven {
            url "https://repo1.maven.org/maven2"
        }
    }
    dependencies {
        classpath libraries.'spring-boot-gradle-plugin'
    }
}

group project_group
version project_version
apply from: 'dependencies.gradle'

allprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: "java"
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
}

configurations {
    provided
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/central' }
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/spring' }
    maven { url 'https://maven.aliyun.com/repository/google' }
    mavenCentral()
    maven {
        url "https://repo1.maven.org/maven2"
    }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-data-redis',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.mariadb.jdbc:mariadb-java-client',
            'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    )
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
gradle.taskGraph.whenReady {
    tasks.each { task ->
        if (task.name.contains('test')) {
            task.enabled = false
        }
    }
}